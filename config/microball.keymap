#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

//マウスキーを押したらタイムアウトを10秒延長

&mkp_input_listener { input-processors = <&zip_temp_layer 4 10000>; };

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                     &kp W         &kp E         &kp R                   &kp T                                                 &kp Y      &kp U  &lt 5 I    &kp O    &kp P
&kp A                     &kp S         &kp D         &kp F                   &kp G      &kp LS(LG(S))               &kp MINUS      &kp H      &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_CONTROL Z        &kp X         &kp C         &kp V                   &kp B      &kp COLON                   &kp SEMICOLON  &kp N      &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&mt RIGHT_SHIFT CAPSLOCK  &kp LEFT_ALT  &kp LEFT_GUI  &mt LEFT_ALT BACKSPACE  &lt 3 F14  &lt_to_layer_0 1 SPACE      &lt 1 ENTER    &lt 2 F13                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans     &kp LS(HOME)        &kp LS(UP_ARROW)    &kp LS(END)       &trans                                &kp LC(Y)      &kp DELETE      &kp UP_ARROW    &kp PAGE_UP      &kp PAGE_DOWN
&kp LC(A)  &kp LS(LEFT_ARROW)  &kp LS(DOWN_ARROW)  &kp LS(RIGHT)     &trans     &trans      &kp LG(LS(S))  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp F2
&kp LC(Z)  &kp LC(X)           &kp LC(C)           &kp LC(V)         &kp LC(B)  &trans      &trans         &kp RET        &kp HOME        &trans          &kp END          &kp F5
&trans     &trans              &trans              &kp LEFT_CONTROL  &trans     &trans      &trans         &trans                                                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp SLASH                &kp N7        &kp N8        &kp NUMBER_9  &kp MINUS                          &none          &kp DELETE  &kp UP_ARROW    &none      &none
&kp STAR                 &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS    &trans         &trans  &kp BACKSPACE  &kp LEFT    &kp DOWN_ARROW  &kp RIGHT  &kp F2
&mt LEFT_SHIFT NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &kp EQUAL      &trans  &kp RET        &kp HOME    &none           &kp END    &none
&trans                   &trans        &trans        &trans        &trans      &trans         &trans  &trans                                                &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                               &kp LS(NUMBER_6)  &kp LS(N7)     &kp LS(N8)            &kp LS(N9)             &kp LS(N0)
&none             &none             &none             &none             &none         &trans      &kp GRAVE      &kp MINUS         &kp EQUAL      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp BACKSLASH
&bt BT_SEL 0      &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3      &bt BT_SEL 4  &trans      &kp LS(GRAVE)  &kp LS(MINUS)     &kp LS(EQUAL)  &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp LS(BACKSLASH)
&trans            &trans            &trans            &trans            &trans        &trans      &trans         &trans                                                                        &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &mkp MB4  &mkp MB1  &mkp MB2  &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
